{"ast":null,"code":"import _classCallCheck from \"/Users/admin/Desktop/code/clicky-game/clicky-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/admin/Desktop/code/clicky-game/clicky-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/admin/Desktop/code/clicky-game/clicky-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/admin/Desktop/code/clicky-game/clicky-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/admin/Desktop/code/clicky-game/clicky-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/admin/Desktop/code/clicky-game/clicky-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/admin/Desktop/code/clicky-game/clicky-app/src/App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Navbar from \"./components/Navbar\";\nimport friends from \"./friends.json\";\nimport \"./index.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      friends: friends,\n      score: 0,\n      highscore: 0,\n      unselectedFriends: friends,\n      rightWrong: \"\",\n      clicked: []\n    };\n\n    _this.handleShuffle = function () {\n      var shuffledArray = shuffleArray(friends);\n\n      _this.setState({\n        friends: shuffledArray\n      });\n    };\n\n    _this.handleClick = function (id) {\n      // alert(this.state.friends);\n      if (_this.state.clicked.indexOf(id) === -1) {\n        _this.handleIncrement(); //concat.() will concatonate the clicked id to the clicked array\n\n\n        _this.setState({\n          clicked: _this.state.clicked.concat(id)\n        });\n      } else {\n        _this.handleReset();\n      }\n    };\n\n    _this.handleIncrement = function () {\n      var that = _assertThisInitialized(_assertThisInitialized(_this));\n\n      var newScore = _this.state.score + 1;\n\n      _this.setState({\n        score: newScore,\n        rightWrong: \"You've scored a point!\"\n      });\n\n      setTimeout(function () {\n        that.setState({\n          rightWrong: \"\"\n        });\n      }, 1000); //conditional statement updating the highscore if \n      //newScore is equal to or less tahn hight score \n\n      if (newScore >= _this.state.highscore) {\n        _this.setState({\n          highscore: newScore\n        });\n      } //else if newScore is equal to 12 (which is getting all 12 right) \n      //setState of the message to You've won\n      else if (newScore === 12) {\n          _this.setState({\n            rightWrong: \"You've Won!!\"\n          });\n        } //after game is over, call the handleShuffle function\n\n\n      _this.handleShuffle();\n    };\n\n    _this.handleReset = function () {\n      _this.setState({\n        score: 0,\n        highscore: _this.state.highscore,\n        rightWrong: \"Game Over!\",\n        clicked: []\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // When the component mounts, shuffle the cards\n    value: function componentDidMount() {\n      this.handleShuffle();\n    }\n  }, {\n    key: \"render\",\n    // Map over this.state.friends and render a FriendCard component for each friend object\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        score: this.state.score,\n        highscore: this.state.highscore,\n        rightWrong: this.state.rightWrong,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), this.state.friends.map(function (friend) {\n        return React.createElement(FriendCard, {\n          handleClick: _this2.handleClick,\n          handleIncrement: _this2.handleIncrement,\n          handleReset: _this2.handleReset,\n          handleShuffle: _this2.handleShuffle,\n          id: friend.id,\n          key: friend.id,\n          image: friend.image // location={friend.location}\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/admin/Desktop/code/clicky-game/clicky-app/src/App.js"],"names":["React","Component","FriendCard","Wrapper","Title","Navbar","friends","App","state","score","highscore","unselectedFriends","rightWrong","clicked","handleShuffle","shuffledArray","shuffleArray","setState","handleClick","id","indexOf","handleIncrement","concat","handleReset","that","newScore","setTimeout","map","friend","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Navbar from \"./components/Navbar\";\nimport friends from \"./friends.json\";\nimport \"./index.css\";\n\n\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    score: 0,\n    highscore: 0,\n    unselectedFriends: friends,\n    rightWrong: \"\",\n    clicked: []\n  };\n\n\n  //Below needs to be the click function that records click\n\n\n\n\n\n  handleShuffle = () => {\n    let shuffledArray = shuffleArray(friends);\n    this.setState({ friends: shuffledArray })\n  }\n\n  // When the component mounts, shuffle the cards\n  componentDidMount() {\n    this.handleShuffle();\n  }\n\n  handleClick = id => {\n    // alert(this.state.friends);\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      //concat.() will concatonate the clicked id to the clicked array\n      this.setState({ clicked: this.state.clicked.concat(id) })\n    } else {\n      this.handleReset();\n    }\n  };\n\n\n  //function for handling incrementing the score\n\n  handleIncrement = () => {\nvar that = this;\n    const newScore = this.state.score + 1;\n    this.setState({\n      score: newScore,\n      rightWrong: \"You've scored a point!\"\n\n    });\n\n    setTimeout(function () {\n      that.setState({ rightWrong: \"\" })\n    }, 1000)\n    //conditional statement updating the highscore if \n    //newScore is equal to or less tahn hight score \n    if (newScore >= this.state.highscore) {\n      this.setState({ highscore: newScore });\n    }\n    //else if newScore is equal to 12 (which is getting all 12 right) \n    //setState of the message to You've won\n    else if (newScore === 12) {\n      this.setState({ rightWrong: \"You've Won!!\" });\n    }\n    //after game is over, call the handleShuffle function\n    this.handleShuffle();\n  };\n\n  //function for resetting game\n  handleReset = () => {\n    this.setState({\n      score: 0,\n      highscore: this.state.highscore,\n      rightWrong: \"Game Over!\",\n      clicked: []\n    })\n  };\n\n\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          score={this.state.score}\n          highscore={this.state.highscore}\n          rightWrong={this.state.rightWrong}\n        />\n        <Title />\n        {this.state.friends.map(friend => (\n          <FriendCard\n            handleClick={this.handleClick}\n            handleIncrement={this.handleIncrement}\n            handleReset={this.handleReset}\n            handleShuffle={this.handleShuffle}\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n          // location={friend.location}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}